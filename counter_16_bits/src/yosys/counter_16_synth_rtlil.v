/* Generated by Yosys 0.20+45 (git sha1 029c2785e, clang 13.0.1 -fPIC -Os) */

(* top =  1  *)
(* src = "counter_4_bits.v:90.1-185.10" *)
module counter_16_bits(Q, w1, w2, w3, w4, D, CLK, ENB, MODO);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  (* src = "counter_4_bits.v:138.13-138.20" *)
  wire _04_;
  (* src = "counter_4_bits.v:138.24-138.31" *)
  wire _05_;
  (* src = "counter_4_bits.v:138.35-138.42" *)
  wire _06_;
  (* src = "counter_4_bits.v:172.19-172.33" *)
  wire _07_;
  (* src = "counter_4_bits.v:172.37-172.51" *)
  wire _08_;
  (* src = "counter_4_bits.v:173.37-173.51" *)
  wire _09_;
  (* src = "counter_4_bits.v:174.37-174.51" *)
  wire _10_;
  (* src = "counter_4_bits.v:172.43-172.51" *)
  wire _11_;
  (* src = "counter_4_bits.v:138.13-138.31" *)
  wire _12_;
  (* src = "counter_4_bits.v:138.13-138.42" *)
  wire _13_;
  (* src = "counter_4_bits.v:92.11-92.14" *)
  input CLK;
  wire CLK;
  (* src = "counter_4_bits.v:91.18-91.19" *)
  input [15:0] D;
  wire [15:0] D;
  (* src = "counter_4_bits.v:94.11-94.14" *)
  input ENB;
  wire ENB;
  (* src = "counter_4_bits.v:93.17-93.21" *)
  input [1:0] MODO;
  wire [1:0] MODO;
  (* src = "counter_4_bits.v:95.19-95.20" *)
  output [15:0] Q;
  wire [15:0] Q;
  (* src = "counter_4_bits.v:101.9-101.11" *)
  reg a1 = 1'h0;
  (* src = "counter_4_bits.v:101.13-101.15" *)
  reg a2 = 1'h0;
  (* src = "counter_4_bits.v:101.17-101.19" *)
  reg a3 = 1'h0;
  (* src = "counter_4_bits.v:101.21-101.23" *)
  reg a4;
  (* src = "counter_4_bits.v:105.10-105.14" *)
  wire clk1;
  (* src = "counter_4_bits.v:105.16-105.20" *)
  wire clk2;
  (* src = "counter_4_bits.v:105.22-105.26" *)
  wire clk3;
  (* src = "counter_4_bits.v:104.10-104.17" *)
  wire modo_11;
  (* src = "counter_4_bits.v:96.12-96.14" *)
  output w1;
  wire w1;
  (* src = "counter_4_bits.v:96.15-96.17" *)
  output w2;
  wire w2;
  (* src = "counter_4_bits.v:96.19-96.21" *)
  output w3;
  wire w3;
  (* src = "counter_4_bits.v:96.22-96.24" *)
  output w4;
  wire w4;
  (* src = "counter_4_bits.v:125.5-168.8" *)
  always @(posedge CLK)
    if (_00_) a1 <= 1'h1;
    else if (modo_11) a1 <= 1'h0;
  (* src = "counter_4_bits.v:125.5-168.8" *)
  always @(posedge CLK)
    if (_01_) a2 <= 1'h1;
    else if (modo_11) a2 <= 1'h0;
  (* src = "counter_4_bits.v:125.5-168.8" *)
  always @(posedge CLK)
    if (_02_) a3 <= 1'h1;
    else if (modo_11) a3 <= 1'h0;
  (* src = "counter_4_bits.v:125.5-168.8" *)
  always @(posedge CLK)
    if (_03_) a4 <= 1'h1;
    else if (modo_11) a4 <= 1'h0;
  assign _00_ = | { _13_, w1 };
  assign _01_ = | { _13_, w2 };
  assign _02_ = | { _13_, w3 };
  assign _03_ = | { _13_, w4 };
  assign _04_ = ~ (* src = "counter_4_bits.v:138.13-138.20" *) w1;
  assign _05_ = ~ (* src = "counter_4_bits.v:138.24-138.31" *) w2;
  assign _06_ = ~ (* src = "counter_4_bits.v:138.35-138.42" *) w3;
  assign modo_11 = MODO == (* src = "counter_4_bits.v:171.23-171.36" *) 2'h3;
  assign _08_ = w1 && (* src = "counter_4_bits.v:172.37-172.51" *) _11_;
  assign _09_ = w2 && (* src = "counter_4_bits.v:173.37-173.51" *) _11_;
  assign _07_ = CLK && (* src = "counter_4_bits.v:174.19-174.33" *) modo_11;
  assign _10_ = w3 && (* src = "counter_4_bits.v:174.37-174.51" *) _11_;
  assign _11_ = ! (* src = "counter_4_bits.v:174.43-174.51" *) modo_11;
  assign _12_ = _04_ || (* src = "counter_4_bits.v:138.13-138.31" *) _05_;
  assign _13_ = _12_ || (* src = "counter_4_bits.v:138.13-138.42" *) _06_;
  assign clk1 = _07_ || (* src = "counter_4_bits.v:172.19-172.51" *) _08_;
  assign clk2 = _07_ || (* src = "counter_4_bits.v:173.19-173.51" *) _09_;
  assign clk3 = _07_ || (* src = "counter_4_bits.v:174.19-174.51" *) _10_;
  (* module_not_derived = 32'd1 *)
  (* src = "counter_4_bits.v:181.20-181.100" *)
  counter_4_bits counter_FSB (
    .CLK(clk1),
    .D(D[7:4]),
    .ENB(a2),
    .MODO(MODO),
    .Q(Q[7:4]),
    .RCO(w2)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "counter_4_bits.v:180.20-180.99" *)
  counter_4_bits counter_LSB (
    .CLK(CLK),
    .D(D[3:0]),
    .ENB(a1),
    .MODO(MODO),
    .Q(Q[3:0]),
    .RCO(w1)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "counter_4_bits.v:183.20-183.104" *)
  counter_4_bits counter_MSB (
    .CLK(clk3),
    .D(D[15:12]),
    .ENB(a4),
    .MODO(MODO),
    .Q(Q[15:12]),
    .RCO(w4)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "counter_4_bits.v:182.20-182.102" *)
  counter_4_bits counter_SSB (
    .CLK(clk2),
    .D(D[11:8]),
    .ENB(a3),
    .MODO(MODO),
    .Q(Q[11:8]),
    .RCO(w3)
  );
endmodule

(* src = "counter_4_bits.v:12.1-84.10" *)
module counter_4_bits(Q, RCO, D, ENB, CLK, MODO);
  (* src = "counter_4_bits.v:51.27-51.37" *)
  (* unused_bits = "4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _00_;
  wire _01_;
  (* src = "counter_4_bits.v:50.16-50.27" *)
  wire _02_;
  (* src = "counter_4_bits.v:53.20-53.37" *)
  wire _03_;
  (* src = "counter_4_bits.v:58.21-58.32" *)
  wire _04_;
  (* src = "counter_4_bits.v:65.21-65.34" *)
  wire _05_;
  (* src = "counter_4_bits.v:72.22-72.35" *)
  wire _06_;
  (* src = "counter_4_bits.v:61.20-61.37" *)
  wire _07_;
  (* src = "counter_4_bits.v:68.41-68.58" *)
  wire _08_;
  (* src = "counter_4_bits.v:68.62-68.79" *)
  wire _09_;
  (* src = "counter_4_bits.v:68.20-68.58" *)
  wire _10_;
  (* src = "counter_4_bits.v:68.20-68.79" *)
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire [3:0] _15_;
  wire [3:0] _16_;
  wire [3:0] _17_;
  wire [3:0] _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  (* src = "counter_4_bits.v:59.27-59.37" *)
  (* unused_bits = "4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _23_;
  (* src = "counter_4_bits.v:67.27-67.37" *)
  (* unused_bits = "4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _24_;
  (* src = "counter_4_bits.v:27.11-27.14" *)
  input CLK;
  wire CLK;
  (* src = "counter_4_bits.v:24.17-24.18" *)
  input [3:0] D;
  wire [3:0] D;
  (* src = "counter_4_bits.v:26.11-26.14" *)
  input ENB;
  wire ENB;
  (* src = "counter_4_bits.v:25.17-25.21" *)
  input [1:0] MODO;
  wire [1:0] MODO;
  (* src = "counter_4_bits.v:28.18-28.19" *)
  output [3:0] Q;
  wire [3:0] Q;
  (* src = "counter_4_bits.v:29.15-29.21" *)
  reg [3:0] Q_temp;
  (* src = "counter_4_bits.v:31.16-31.19" *)
  output RCO;
  reg RCO;
  assign _00_ = Q_temp + (* src = "counter_4_bits.v:51.27-51.37" *) 32'd1;
  (* src = "counter_4_bits.v:36.5-77.12" *)
  always @(posedge CLK)
    if (!ENB) Q_temp <= 4'h0;
    else if (_01_) Q_temp <= _18_;
  (* src = "counter_4_bits.v:36.5-77.12" *)
  always @(posedge CLK)
    if (!ENB) RCO <= 1'h0;
    else if (_01_) RCO <= _14_;
  assign _01_ = | { _06_, _05_, _04_, _02_ };
  assign _02_ = ! (* src = "counter_4_bits.v:50.16-50.27" *) MODO;
  assign _03_ = Q_temp == (* src = "counter_4_bits.v:53.20-53.37" *) 4'hf;
  assign _04_ = MODO == (* src = "counter_4_bits.v:58.21-58.32" *) 2'h1;
  assign _05_ = MODO == (* src = "counter_4_bits.v:65.21-65.34" *) 2'h2;
  assign _06_ = MODO == (* src = "counter_4_bits.v:72.22-72.35" *) 2'h3;
  assign _07_ = Q_temp <= (* src = "counter_4_bits.v:68.20-68.37" *) 4'h0;
  assign _08_ = Q_temp <= (* src = "counter_4_bits.v:68.41-68.58" *) 4'h1;
  assign _09_ = Q_temp <= (* src = "counter_4_bits.v:68.62-68.79" *) 4'h2;
  assign _10_ = _07_ || (* src = "counter_4_bits.v:68.20-68.58" *) _08_;
  assign _11_ = _10_ || (* src = "counter_4_bits.v:68.20-68.79" *) _09_;
  assign _12_ = _04_ ? (* full_case = 32'd1 *) (* src = "counter_4_bits.v:58.21-58.32|counter_4_bits.v:58.18-75.16" *) _22_ : _21_;
  assign _13_ = _03_ ? (* src = "counter_4_bits.v:53.20-53.37|counter_4_bits.v:53.17-55.20" *) 1'h1 : 1'h0;
  assign _14_ = _02_ ? (* full_case = 32'd1 *) (* src = "counter_4_bits.v:50.16-50.27|counter_4_bits.v:50.13-75.16" *) _13_ : _12_;
  assign _15_ = _06_ ? (* src = "counter_4_bits.v:72.22-72.35|counter_4_bits.v:72.18-75.16" *) D : 4'hx;
  assign _16_ = _05_ ? (* full_case = 32'd1 *) (* src = "counter_4_bits.v:65.21-65.34|counter_4_bits.v:65.18-75.16" *) _24_[3:0] : _15_;
  assign _17_ = _04_ ? (* full_case = 32'd1 *) (* src = "counter_4_bits.v:58.21-58.32|counter_4_bits.v:58.18-75.16" *) _23_[3:0] : _16_;
  assign _18_ = _02_ ? (* full_case = 32'd1 *) (* src = "counter_4_bits.v:50.16-50.27|counter_4_bits.v:50.13-75.16" *) _00_[3:0] : _17_;
  assign _19_ = _06_ ? (* src = "counter_4_bits.v:72.22-72.35|counter_4_bits.v:72.18-75.16" *) 1'h0 : 1'hx;
  assign _20_ = _11_ ? (* src = "counter_4_bits.v:68.20-68.79|counter_4_bits.v:68.17-70.20" *) 1'h1 : 1'h0;
  assign _21_ = _05_ ? (* full_case = 32'd1 *) (* src = "counter_4_bits.v:65.21-65.34|counter_4_bits.v:65.18-75.16" *) _20_ : _19_;
  assign _22_ = _07_ ? (* src = "counter_4_bits.v:61.20-61.37|counter_4_bits.v:61.17-63.20" *) 1'h1 : 1'h0;
  assign _23_ = Q_temp - (* src = "counter_4_bits.v:59.27-59.37" *) 32'd1;
  assign _24_ = Q_temp - (* src = "counter_4_bits.v:67.27-67.37" *) 32'd3;
  assign Q = Q_temp;
endmodule
